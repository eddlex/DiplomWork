@page "/Registration"

@using System.Text.RegularExpressions
@using FrontEnd.Model
<style>
	body {
		background-color: black;
		margin: 0 0 30px;
		display: flex;
		align-items: center;
		justify-content: center;
		min-height: 100vh;
		min-width: 50vh;
	}

</style>


<MudCard Class="pa-5 align-content-center " style="background-color: #E0E0E0;" Elevation="10" Outlined="true">
	<MudCardContent>
		<h1> Գրանցում </h1>
		<MudForm @ref="form" @bind-IsValid="@success" @bind-Errors="@errors" Class="select-container" id="signForm">

			<MudTextField T="string" Label="Մուտքանուն" Required="true" RequiredError="Մուտքանունը պարտադիր է!"
			@bind-Value="Model.UserName" />
			<MudTextField T="string" Label="Էլ․ հասցե" Required="true" RequiredError="Էլ․ հասցեն պարտադիր է!"
						  Validation="@(new EmailAddressAttribute() { ErrorMessage = "Էլ․ հասցեն սխալ է" })"
			@bind-Value="Model.Email" />
			<MudTextField T="string"
						  Label="Գաղտնաբառ" HelperText="Ընտրեք ամուր գաղտնաբառ"
						  InputType="@PasswordInput"
						  Validation="@(new Func<string, IEnumerable<string>>(PasswordStrength))" Required="true"
						  RequiredError="Գաղտնաբառը պարտադիր է!"
						  Adornment="Adornment.End" AdornmentIcon="@PasswordInputIcon" OnAdornmentClick="ShowPass1"
			@bind-Value="Model.Password" />

			<MudTextField T="string"
						  Label="Կրկնեք գաղտնաբառը" 
						  InputType="@PasswordInput2"
						  Validation="@(new Func<string, IEnumerable<string>>(ValidatePasswordMatch))" Required="true"
						  RequiredError="Գաղտնաբառի կրկնությունը պարտադիր է!"
						  Adornment="Adornment.End" AdornmentIcon="@PasswordInputIcon" OnAdornmentClick="ShowPass2"
			 />
		
			<SelectComponent Enum="@Departments"/>
			              
	
			
			<MudButton Variant="Variant.Filled" Color="Color.Primary" DisableElevation="true" OnClick="@(() => { form.Validate(); Register(); })"
					   Class="my-5">Գրանցվել</MudButton>
			<MudButton Variant="Variant.Outlined" DisableElevation="true" OnClick="@(() => form.ResetAsync())"
					   Class="mx-5">Մաքրել</MudButton>

			<div class="signup-link">
				<p>Ունեք հաշիվ? <a href="/">Մուտք</a></p>
			</div>
		</MudForm>
	</MudCardContent>
</MudCard>

@code{
	bool success;
	string[] errors = { };
	// MudTextField<string> pwField1;
	MudForm form;


	private IEnumerable<string> PasswordStrength(string pw)
	{

		if (string.IsNullOrWhiteSpace(pw))
		{
			yield return "Գաղտնաբառը պարտադիր է!";
			yield break;
		}
		if (pw.Length < 8)
			yield return "Գաղտնաբառը պետք է լինի 8 նիշից ավելի";
		if (!Regex.IsMatch(pw, @"[A-Z]"))
			yield return "Գաղտնաբառը պետք է պարունակի գոնե մեկ մեծատառ";
		if (!Regex.IsMatch(pw, @"[a-z]"))
			yield return "Գաղտնաբառը պետք է պարունակի գոնե մեկ փոքրատառ";
		if (!Regex.IsMatch(pw, @"[0-9]"))
			yield return "Գաղտնաբառը պետք է պարունակի գոնե մեկ թիվ";
	}

	private IEnumerable<string> ValidatePasswordMatch(string value)
	{
		if (value != Model.Password)
		{
			yield return "Գաղտնաբառերը չեն համապատասխանում";
		}
	}


	bool isShow, isShow2;
	InputType PasswordInput = InputType.Password;
	InputType PasswordInput2 = InputType.Password;

	string PasswordInputIcon = Icons.Material.Filled.VisibilityOff;
	string PasswordInputIcon2 = Icons.Material.Filled.VisibilityOff;

	void ShowPass1()
	{
		@if (isShow)
		{
			isShow = false;
			PasswordInputIcon = Icons.Material.Filled.VisibilityOff;
			PasswordInput = InputType.Password;
		}
		else
		{
			isShow = true;
			PasswordInputIcon = Icons.Material.Filled.Visibility;
			PasswordInput = InputType.Text;
		}
	}

	void ShowPass2()
	{
		@if (isShow2)
		{
			isShow2 = false;
			PasswordInputIcon2 = Icons.Material.Filled.VisibilityOff;
			PasswordInput2 = InputType.Password;
		}
		else
		{
			isShow2 = true;
			PasswordInputIcon2 = Icons.Material.Filled.Visibility;
			PasswordInput2 = InputType.Text;
		}
	}
	
	
	
}