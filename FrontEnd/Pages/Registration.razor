@page "/Registration"

@using System.Text.RegularExpressions
<style>
	body {
		background-color: black;
		margin: 0 0 30px;
		display: flex;
		align-items: center;
		justify-content: center;
		min-height: 100vh;
		min-width: 50vh;
	}

</style>


<MudCard Class="pa-5 align-content-center " style="background-color: #E0E0E0;" Elevation="10" Outlined="true">
	<MudCardContent>
		<h1> Sign up </h1>
		<MudForm @ref="form" @bind-IsValid="@success" @bind-Errors="@errors" Class="select-container" id="signForm">

			<MudTextField T="string" Label="Username" Required="true" RequiredError="User name is required!"
			@bind-Value="Model.UserName" />
			<MudTextField T="string" Label="Email" Required="true" RequiredError="Email is required!"
						  Validation="@(new EmailAddressAttribute() { ErrorMessage = "The email address is invalid" })"
			@bind-Value="Model.Email" />
			<MudTextField T="string"
						  Label="Password" HelperText="Choose a strong password" @ref="pwField1"
						  InputType="@PasswordInput"
						  Validation="@(new Func<string, IEnumerable<string>>(PasswordStrength))" Required="true"
						  RequiredError="Password is required!"
						  Adornment="Adornment.End" AdornmentIcon="@PasswordInputIcon" OnAdornmentClick="ButtonTestclick"
			@bind-Value="Model.Password" />
			
			<div style="margin-top: 10px; margin-bottom: 30px;">
				<label>Department</label>
				<select id="color" class="mangust" form="signForm" required @bind="@Model.DepartmentId">
					@foreach (var item in Departments)
					{
						<option value="@item.Key" >@item.Value </option>
					}
				</select>
			</div>
			
			<MudButton Variant="Variant.Filled" Color="Color.Primary" DisableElevation="true" OnClick="@(() => { form.Validate(); Register(); })"
					   Class="my-5">Sign up</MudButton>
			<MudButton Variant="Variant.Outlined" DisableElevation="true" OnClick="@(() => form.ResetAsync())"
					   Class="mx-5">Clear</MudButton>

			<div class="signup-link">
				<p>Already have an account? <a href="/">Sign In</a></p>
			</div>
		</MudForm>
	</MudCardContent>
</MudCard>

@code{
	bool success;
	string[] errors = { };
	MudTextField<string> pwField1;
	MudForm form;


	private IEnumerable<string> PasswordStrength(string pw)
	{

		if (string.IsNullOrWhiteSpace(pw))
		{
			yield return "Password is required!";
			yield break;
		}
		if (pw.Length < 8)
			yield return "Password must be at least of length 8";
		if (!Regex.IsMatch(pw, @"[A-Z]"))
			yield return "Password must contain at least one capital letter";
		if (!Regex.IsMatch(pw, @"[a-z]"))
			yield return "Password must contain at least one lowercase letter";
		if (!Regex.IsMatch(pw, @"[0-9]"))
			yield return "Password must contain at least one digit";
	}

	//public string Password { get; set;} = "superstrong123";

	bool isShow, isShow2;
	InputType PasswordInput = InputType.Password;
	string PasswordInputIcon = Icons.Material.Filled.VisibilityOff;

	void ButtonTestclick()
	{
		@if (isShow)
		{
			isShow = false;
			PasswordInputIcon = Icons.Material.Filled.VisibilityOff;
			PasswordInput = InputType.Password;
		}
		else
		{
			isShow = true;
			PasswordInputIcon = Icons.Material.Filled.Visibility;
			PasswordInput = InputType.Text;
		}
	}
}