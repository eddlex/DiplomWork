@page "/Recipients"
@using System.Collections.Generic;
@using System.Net.Http.Json
@using FrontEnd.Model
@inject HttpClient httpClient
@inject IDialogService DialogService
@using FrontEnd.Shared
@using FrontEnd.Shared.Dialog;


<style>
    body {
        background-color: black;
        opacity: 0.8;
    }

    .custom-elevation {
        box-shadow: 0px 0px 10px 0px rgba(255, 0, 0, 0.75);
    }

    .custom-paper {
        background-color: #651FFF;
        color: white;
        box-shadow: 0 0 10px rgba(255, 255, 255, 0.3); /* Add 3D box-shadow effect */
    }

    .custom-subheader {
        color: white; /* Set your desired text color */
        font-size: 20px;
    }

    /*     .right-corner {
            position: absolute;
            bottom: 7px;
            right: 2px;
            background-color: #fafafa;
            font-size: 10px;
            color: black;
        } */

</style>

<MudThemeProvider />

<div class="body">
    <MudLayout style="background-color: #212121; color: white;" Elevation="5">
        <MudAppBar Elevation="5">
            <MudIconButton Icon="@Icons.Material.Filled.Menu" Color="Color.Inherit" Edge="Edge.Start" OnClick="@((e) => DrawerToggle())" />
            <MudText Typo="Typo.h5" Class="ml-3">Admin panel</MudText>          
            <MudSpacer />
            <MudIconButton Icon="@Icons.Material.Filled.Logout" Color="Color.Inherit" Edge="Edge.End" OnClick="@((e) => Logout())" />
        </MudAppBar>

        <MudDrawer @bind-Open="_drawerOpen" ClipMode="DrawerClipMode.Always" Elevation="2" Color="Color.Inherit">
            <MudNavMenu Rounded="true" Margin="Margin.Dense" Color="Color.Primary" Class="pa-2" Bordered="true">
                <MudNavLink Href="/Users" Match="NavLinkMatch.All">Users</MudNavLink>
                <MudNavLink Href="/unis" Match="NavLinkMatch.Prefix">Universities</MudNavLink>
                <MudNavLink Href="/Recipients" Match="NavLinkMatch.Prefix">Recipients</MudNavLink>
                <MudNavLink Href="/surveys" Match="NavLinkMatch.Prefix">Surveys</MudNavLink>
                @* <MudNavGroup Title="Surveys" Expanded="false">
                <MudNavLink Href="/allsurveys" Match="NavLinkMatch.Prefix">All</MudNavLink>
                <MudNavLink Href="/students" Match="NavLinkMatch.Prefix">Among students</MudNavLink>
                <MudNavLink Href="/companies" Match="NavLinkMatch.Prefix">Among companies</MudNavLink>
                <MudNavLink Href="/lecturers" Match="NavLinkMatch.Prefix">Among lecturers</MudNavLink>
                </MudNavGroup> *@
                <MudNavLink Href="/subjects" Match="NavLinkMatch.Prefix">Subjects</MudNavLink>

                <MudNavGroup Title="Settings" Expanded="false">
                    <!-- <MudNavLink Href="/users"  Match="NavLinkMatch.Prefix">Users</MudNavLink> -->
                    <MudNavLink Href="/security" Match="NavLinkMatch.Prefix">Security</MudNavLink>
                </MudNavGroup>
                <MudNavLink Href="/about" Match="NavLinkMatch.Prefix">About</MudNavLink>
            </MudNavMenu>
        </MudDrawer>

        <MudMainContent style="background-color: black; color: white;" Elevation="5">
            <div style="height: 10px;"></div>
            <div style="height: 88vh; width: 83vw; margin: 0 auto;">
                <MudDataGrid T="Recipient" Items="@GridRecipient" SortMode="SortMode.Multiple" Filterable="true"
                             RowClick="@RowClicked" RowContextMenuClick="RowRightClicked" Selectable="false" MultiSelection="false"
                             ReadOnly="false" FixedHeader="true" EditMode="DataGridEditMode.Form" RowsPerPage="10"
                             StartedEditingItem="@StartedEditingItem" CanceledEditingItem="@CanceledEditingItem" CommittedItemChanges="@CommittedItemChanges"
                             Bordered="true" Dense="true" EditTrigger="@(_editTriggerRowClick ? DataGridEditTrigger.OnRowClick : DataGridEditTrigger.Manual)"
                             ColumnResizeMode="ResizeMode.Container" Style="height:100%" >
                    <ToolBarContent>
                        <MudText Typo="Typo.h4" class="mr-2">Recipients</MudText>
                        <MudIconButton @onclick="OpenDialog" Icon="@Icons.Material.Filled.Add" Variant="Variant.Filled" Color="Color.Primary" Size="Size.Small" />
                        <MudSpacer />
                        @* <MudTextField @bind-Value="_searchString" Placeholder="Search" Adornment="Adornment.Start" Immediate="true" *@
                        @*               AdornmentIcon="@Icons.Material.Filled.Search" IconSize="Size.Medium" Class="mt-0"></MudTextField> *@
                    </ToolBarContent>

                    <Columns>
                        <PropertyColumn Property="x => x.Id" Sortable="false" Filterable="false" IsEditable="false" />
                        <PropertyColumn Property="x => x.GroupId" Title="Group Id" />
                        <PropertyColumn Property="x => x.Mail" />
                        <PropertyColumn Property="x => x.Name" Title="University" />
                        <PropertyColumn Property="x => x.Description" />
                        <PropertyColumn Property="x => x.UniversityId" Title="University Id" />

                        <TemplateColumn Hidden="@(_isCellEditMode || _editTriggerRowClick)" CellClass="d-flex justify-end"
                                        Sortable="false" Filterable="false" StickyRight="true">
                            <CellTemplate>
                                <MudIconButton Icon="@Icons.Material.Outlined.Edit" Size="@Size.Small" OnClick="@context.Actions.StartEditingItemAsync"> </MudIconButton>
                                <MudSpacer />
                                <MudIconButton Icon="@Icons.Material.Outlined.Delete" Size="Size.Small" Color="Color.Error" OnClick="@(() => DeleteRecipient(context.Item))"> </MudIconButton>
                            </CellTemplate>
                        </TemplateColumn>
                    </Columns>

                    <PagerContent>
                        <div class="right-corner">
                            <MudDataGridPager T="Recipient" />
                        </div>
                    </PagerContent>

                </MudDataGrid>
            </div>

            @* <MudButton @onclick="OpenDialog" Variant="Variant.Filled" Color="Color.Primary">
                Add recipient
            </MudButton> *@
        </MudMainContent>
    </MudLayout>
</div>

@code {
    private void OpenDialog()
    {
        var options = new DialogOptions { CloseOnEscapeKey = true, MaxWidth = MaxWidth.Large, Position = DialogPosition.Center };
        DialogService.Show<DialogComponent<Recipient>>("Add recipient", options);
    }

    bool _drawerOpen = true;
    private bool _isCellEditMode;
    private bool _editTriggerRowClick;
    public string _searchString;
    private bool _sortNameByLength;
    private List<string> _events = new();


    void DrawerToggle()
    {
        _drawerOpen = !_drawerOpen;
    }

    private void Logout()
    {
        // NavigationManager.NavigateTo("/logout");
    }

    private void DeleteRecipient(Recipient item)
    {

    }


    // // quick filter - filter globally across multiple columns with the same input
    // private Func<Recipient, bool> _quickFilter => x =>
    // {
    //     if (string.IsNullOrWhiteSpace(_searchString))
    //         return true;

    //     if (x.Mail.Contains(_searchString, StringComparison.OrdinalIgnoreCase))
    //         return true;

    //     if (x.UserName.Contains(_searchString, StringComparison.OrdinalIgnoreCase))
    //         return true;

    //     // if ($"{x.Phone} {x.Email} {x.Name}".Contains(_searchString))
    //     //     return true;

    //     return false;
    // };


    // events
    void RowClicked(DataGridRowClickEventArgs<Recipient> args)
    {
        System.Text.Json.JsonSerializer.Serialize(args.Item);
    }

    void RowRightClicked(DataGridRowClickEventArgs<Recipient> args)
    {
        //args.RowIndex
        System.Text.Json.JsonSerializer.Serialize(args.Item);
    }

    void SelectedItemsChanged(HashSet<Recipient> items)
    {
        System.Text.Json.JsonSerializer.Serialize(items);
    }

    void StartedEditingItem(Recipient item)
    {
        System.Text.Json.JsonSerializer.Serialize(item);
    }

    void CanceledEditingItem(Recipient item)
    {
        System.Text.Json.JsonSerializer.Serialize(item);
    }

    void CommittedItemChanges(Recipient item)
    {
        System.Text.Json.JsonSerializer.Serialize(item);
    }
}