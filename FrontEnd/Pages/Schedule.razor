@page "/Schedule"
@using FrontEnd.Helpers;
@using FrontEnd.Model.DTO
@using FrontEnd.Model.BL
@using FrontEnd.Model
@inject IDialogService DialogService
@inject HttpClient httpClient
@inject ISnackbar Snackbar
@using MudBlazor
@using System.Threading.Tasks
@using System.Diagnostics;
@using BackEnd.Models.Input
<style>
    body {
        background-color: black;
        opacity: 0.8;
    }

    .custom-elevation {
        box-shadow: 0px 0px 10px 0px rgba(255, 0, 0, 0.75);
    }

    .custom-paper {
        background-color: #651FFF;
        color: white;
        box-shadow: 0 0 10px rgba(255, 255, 255, 0.3);
    }

    .custom-subheader {
        color: white;
        font-size: 20px;
    }

    .div-left {
        width: 56.5%;
        float: left;
        margin: 1% 0 1% 1%;
        height: 99vh
    }

    .div-right {
        width: 40.5%;
        float: right;
        margin: 1% 1% 1% 0;
        height: 99vh;
    }

    .card {
        color: #353535;
        background-color: white;
        padding: 0;
        margin: 0;
    }

    .right {
        overflow-x: hidden;
        overflow-y: scroll;
        max-height: 40vh;
        border: 1px solid #b3b3b3;
        background-color: white;
        border-radius: 1px;
    }

    .right-first {
        background-color: white;
        margin: 0 0 1% 0;
        color: black;
        border-radius: 5px;
        /* padding-left: 1%; */
        padding-top: 2%;
        max-height: 50vh;
    }

    .right-second {
        background-color: white;
        margin: 1% 0 0 0;
        color: black;
        border-radius: 5px;
        /* padding-left: 1%; */
        padding-top: 2%;
        max-height: 50vh;
    }

    .progress {
        position: absolute;
    }
</style>



<MudThemeProvider />
@* <div class="body"> *@
<MudLayout style="background-color: #212121; color: white;" Elevation="5">
    <Drawer></Drawer>
    <MudMainContent style="background-color: black; color: white;" Elevation="5">
        <div class="div-left">
            <MudDataGrid id="left"
                         T="ScheduleDto"
                         Items="@ScheduleDto"
                         SortMode="SortMode.None"
                         Filterable="false"
                         RowClick="@RowClicked"
                         MultiSelection="false"
                         ReadOnly="false"
                         FixedHeader="true"
                         EditMode="DataGridEditMode.Form"
                         RowsPerPage="10"
                         StartedEditingItem="@StartedEditingItem"
                         CanceledEditingItem="@CanceledEditingItem"
                         CommittedItemChanges="@CommittedItemChanges"
                         Bordered="true"
                         Dense="true"
                         EditTrigger="@(_editTriggerRowClick ? DataGridEditTrigger.OnRowClick : DataGridEditTrigger.Manual)"
                         ColumnResizeMode="ResizeMode.Column"
                         Style="height:100%">
                <ToolBarContent>
                    <MudText Typo="Typo.h4" class="mr-2">Առաջարկություններ</MudText>
                    <MudIconButton @onclick="AddRow" Icon="@Icons.Material.Filled.Add" Variant="Variant.Filled" Color="Color.Primary" Size="Size.Small" />
                    <MudSpacer />
                    <MudButton Variant="Variant.Outlined" @onclick="TrainModel" Color="Color.Primary">Աշխատացնել մոդելը</MudButton>
                    <MudButton Variant="Variant.Outlined" @onclick="EvaluateModel" Color="Color.Primary">Հաշվարկել</MudButton>

                </ToolBarContent>

                <Columns>
                    <PropertyColumn Property="x => x.Id" Sortable="false" Filterable="false" IsEditable="true" />
                    <PropertyColumn Property="x => x.Department" Title="Ամբիոն" />
                    <PropertyColumn Property="x => x.Semester" Title="Կիսամյա" />
                    <PropertyColumn Property="x => x.Hours" Title="Ժամաքանակ" />
                    <PropertyColumn Property="x => x.Name" Title="Անուն" />

                    <TemplateColumn Hidden="false" CellClass="d-flex justify-end"
                                    Sortable="false" Filterable="false" StickyRight="true">
                        <CellTemplate>
                            <MudIconButton Icon="@Icons.Material.Filled.AlignVerticalBottom" Size="@Size.Small" Color="Color.Primary"
                            > </MudIconButton>
                             <MudIconButton Icon="@Icons.Material.Outlined.Edit" Size="@Size.Small" OnClick="@(() => EditRow(context.Item.Id))"> </MudIconButton>
                            <MudIconButton Icon="@Icons.Material.Outlined.Delete" Size="Size.Small" Color="Color.Error" OnClick="@(() => DeleteRow(context.Item.Id))"> </MudIconButton>
                        </CellTemplate>
                    </TemplateColumn>
                 
                </Columns>

                <PagerContent>
                    <MudDataGridPager T="FormDto" DisableRowsPerPage="true" />
                </PagerContent>

            </MudDataGrid>
        </div>

        <div id="right" class="div-right">
            @* <div id="right"> *@
            <div class="right-first">
                <h4 class="mud-typography mud-typography-h4 mr-2" style="padding-left: 2%; padding-bottom: 1%; color:#464646;">
                    Ընտրված
                </h4>
                <div class="right">

                    <SortableList Group="sharedLists" Items="selectedRows" Context="item" OnRemove="DeleteFormRow">
                        <SortableItemTemplate>
                            <div class=" card has-border has-background-white">
                                <p class="is-size-4 p-1 ml-1 mb-0">
                                    @(item.Order + 1) . Առարկայի անուն - @item.Title<br style="padding-left: 20px;">
                                                        Վերջնարդյունք - @item.Outcome
                                </p>
                            </div>
                        </SortableItemTemplate>
                    </SortableList>
                </div>
            </div>

            <div class="right-second">
                <h4 class="mud-typography mud-typography-h4 mr-2" style="padding-left: 2%; padding-bottom: 1%; color:#464646;">
                    Առարկաներ
                </h4>
                <div class="right">
                    <SortableList Group="sharedLists" OnRemove="AddFormRow" Items="allSubjects" Context="item">
                        <SortableItemTemplate>
                            <div class="card has-background-white has-border">
                                <p class="is-size-4 p-1 ml-1 mb-0" style="padding-left: 20px;">
                                    @(item.Id) . Առարկայի անուն - @item.Title<br>
                                                Վերջնարդյունք - @item.Outcome
                                </p>
                            </div>
                        </SortableItemTemplate>
                    </SortableList>
                </div>
            </div>
            @* </div> *@
        </div>
    </MudMainContent>
</MudLayout>
@* </div> *@

@code {

    private bool _isCellEditMode;
    private bool _editTriggerRowClick;
    public string _searchString;
    private bool _sortNameByLength;
    private int _currentSelectedScheduleId;
    private List<string> _events = new();

    bool _isEditMode = false;
    bool _readOnly = true;

    void HandleEditMode(bool isEditMode)
    {
        if (isEditMode)
        {
            _readOnly = false;
        }
        else
        {
            _readOnly = true;
        }
        _isEditMode = isEditMode;
    }


    #region MyRegion

    async Task RowClicked(DataGridRowClickEventArgs<ScheduleDto> args)
    {
        await GetScheduleRows(args.Item.Id);
        _currentSelectedScheduleId = args.Item.Id;
    }

    void StartedEditingItem(ScheduleDto item)
    {
        System.Text.Json.JsonSerializer.Serialize(item);
    }

    void CanceledEditingItem(ScheduleDto item)
    {
        System.Text.Json.JsonSerializer.Serialize(item);
    }

    void CommittedItemChanges(ScheduleDto item)
    {
        System.Text.Json.JsonSerializer.Serialize(item);
    }


    void AddItem()
    {

        if (this.ScheduleDto is { Count: > 0 })
            ScheduleRowBl?.Add(new()
                {
                    SubjectId = _currentSelectedScheduleId
                });
    }

    void RowClicked(DataGridRowClickEventArgs<ScheduleBl> args)
    {
        System.Text.Json.JsonSerializer.Serialize(args.Item);
    }

    #endregion


    public List<SubjectDto?>? allSubjects => SubjectsDto;

    public List<SubjectDto?>? selectedRows = new();


    public void DeleteFormRow((int oldIndex, int newIndex) indices)
    {
        var item = selectedRows?[indices.oldIndex];

        if (item == null)
            return;

        allSubjects?.Insert(indices.newIndex, item);

        selectedRows?.Remove(selectedRows[indices.oldIndex]);

        for (var i = 0; i < selectedRows?.Count; ++i)
        {
            selectedRows[i].Order = i;
        }

        var itemBl = DeleteScheduleRow(new ()
            {
                SubjectId = item.Id,
                ScheduleId = _currentSelectedScheduleId,
            });
    }

    private void AddFormRow((int oldIndex, int newIndex) indices)
    {
        var item = allSubjects?[indices.oldIndex];

        if (item == null)
            return;

        selectedRows?.Insert(indices.newIndex, item);
        allSubjects?.Remove(allSubjects[indices.oldIndex]);

        for (var i = 0; i < selectedRows?.Count; ++i)
        {
            selectedRows[i].Order = i;
        }

        var itemBl = AddScheduleRow(new ()
            {
                ScheduleId = _currentSelectedScheduleId,
                SubjectId = item.Id
            });
    }
}
