@page "/"

@using FrontEnd.Model;
@inject IJSRuntime js
<style>
    body {
        background-color: black;
        margin: 0;
        display: flex;
        align-items: center;
        justify-content: center;
        min-height: 100vh;
        min-width: 40vh;
    }

    .paper-container {
        padding: 100% 0;
        margin: 0;
    }
</style>

@inject NavigationManager navMeneger
<AuthorizeView>
    <NotAuthorized>
        <MudCardContent>
            <div class="paper-container">
                <MudPaper Class="pa-5 align-content-center" style="background-color: #E0E0E0;" Elevation="10">
                    <h1> Sign in </h1>
                    <MudForm @ref="form" @bind-IsValid="@success" @bind-Errors="@errors">
                        <MudTextField T="string" id="username"
                                      Label="UserName"
                                      Required="true" RequiredError="User name is required!"
                                      Validation="@(new StringLengthAttribute(20) {ErrorMessage = "The UserName is invalid"})"
                        @bind-Value="model.LogIn" @onkeydown="@(args => { HandleEnterKeyPress(args, "pass"); })" />
                        <MudTextField T="string" id="pass"
                                      Label="Password" @ref="pwField1"
                                      InputType="@PasswordInput"
                                      Validation="@(new Func<string, IEnumerable<string>>(PasswordStrength))"
                                      Required="true" RequiredError="Password is required!"
                                      Adornment="Adornment.End" AdornmentIcon="@PasswordInputIcon" OnAdornmentClick="VisibilityButtonClick"
                                      style="margin-bottom: 10px;"
                        @bind-Value="model.Password" @onkeydown="@(args => { HandleEnterKeyPress(args, "loginButton"); })" />

                        <div class="signup-link">
                            <p>Forgot password? <a href="/ResetPass">Reset</a></p>
                        </div>

                        <MudButton id=loginButton Variant="Variant.Filled" Color="Color.Primary" DisableElevation="true"
                                   OnClick="@(() => { form.Validate(); Authorize(); })" @onkeydown="@(args => { HandleEnterKeyPress(args, ""); })"
                                   Class="my-5">Sign in</MudButton>
                        <MudButton Variant="Variant.Outlined" DisableElevation="true" OnClick="@(()=>form.ResetAsync())"
                                   Class="mx-5">Clear</MudButton>

                        <div class="signup-link">
                            <p>Don't have an account? <a href="/Registration">Sign Up</a></p>
                        </div>

                    </MudForm>
                </MudPaper>
            </div>
        </MudCardContent>
    </NotAuthorized>
</AuthorizeView>


@code {
    bool success;
    string[] errors = { };
    MudTextField<string> pwField1;
    MudForm form;
    AuthorizationPost model = new();

    private IEnumerable<string> PasswordStrength(string pw)
    {
        if (string.IsNullOrWhiteSpace(pw))
        {
            yield return "Password is required!";
            yield break;
        }
    }
    //public string Password { get; set;} = "superstrong123";

    bool isShow;
    InputType PasswordInput = InputType.Password;
    string PasswordInputIcon = Icons.Material.Filled.VisibilityOff;

    void VisibilityButtonClick()
    {
        @if (isShow)
        {
            isShow = false;
            PasswordInputIcon = Icons.Material.Filled.VisibilityOff;
            PasswordInput = InputType.Password;
        }
        else
        {
            isShow = true;
            PasswordInputIcon = Icons.Material.Filled.Visibility;
            PasswordInput = InputType.Text;
        }
    }

    private async void HandleEnterKeyPress(KeyboardEventArgs args, string fieldId)
    {

        if (args.Code == "Enter" || args.Code == "NumpadEnter")
        {
            if (fieldId != "")
                await js.InvokeVoidAsync("setFocus", fieldId);
            else
            {
                await form.Validate();
                Authorize();
            }
        }
    }
}