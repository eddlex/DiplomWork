@using MudBlazor.Extensions
@using FrontEnd.Pages
@using FrontEnd.Helpers
@using System.Runtime.CompilerServices
@inject IJSRuntime Js

@typeparam T
<div class="container">
      <div class="select-box">
        <div class="options-container @(ClassName)">
          
          @foreach (var (name, code) in Enum.Values)
          {
            <div class="option" @onclick="() => ClickOption(name)">
              <input type="radio" class="radio" id="@name" name="category"/>
              <label for="@name" class="SelectValue">@name</label>
            </div>
          }
          </div> 

        <p class="selected" @onclick="Click">
          @Title
        </p>

        <div class="search-box" >
          <input type="text" placeholder="Find..." 
                 @ref="search"
                 @bind="@SearchBoxValue"
                 @onkeyup="SearchOption"
                 id ="search"/>
        </div>
      </div>
    </div>
    

@code
{
  [Parameter] public Select<T>? Enum { get; set; }

  public string? Title { get; set; }

  
  
  [Parameter]
  public EventCallback<int> OnSelectChanged { get; set; }
  
  [Parameter]
  public int SelectedEnum { get; set; }

  
  private ElementReference search;
  private string? SearchBoxValue { get; set; }
 
  
  private bool toggle = true;
  static string? CurrentSelectedDepartment { get; set; }
  private async Task ClickOption(string e)
  {
    CurrentSelectedDepartment = e;
    Title = CurrentSelectedDepartment;
    await Click();
    
  }

  
  private void SearchOption()
  {
    Js.InvokeVoidAsync("SearchOption", SearchBoxValue).GetAwaiter();
  }
  
  private async Task Click()
  {
    switch (toggle)
    {
      case true:
        ClassName = "active";
        toggle = false;
        await Js.InvokeVoidAsync("SetFocusToElement", search);
        break;
      case false:
        ClassName = "";
        toggle = true;
        break;
    }
    
    if (this.Enum != null && 
        this.Title != null && 
        this.Enum.Values != null &&
        this.Enum.Values.TryGetValue(this.Title, out var code))
    {
      SelectedEnum = code;
      await OnSelectChanged.InvokeAsync(SelectedEnum);
    }
    SearchBoxValue = string.Empty;
    SearchOption();
  }
  
  private string ClassName { get; set; } = string.Empty;
  
  
  protected override void OnParametersSet()
  {
    base.OnParametersSet();
    this.Title = CurrentSelectedDepartment ?? Title;
  }

  protected override Task OnInitializedAsync()
  {
    this.Title = this.Enum?.Title;
    return base.OnInitializedAsync();
  }

}




<HeadContent>
<style>
* {
  margin: 0;
  box-sizing: border-box;
}

body {
  font-family: "Roboto", sans-serif;
  background: #f7f6ff;
}

h2 {
  margin: 16px;
}

.container {
  margin-top: 10px;
  padding: 0 0 ;
}

.select-box {
  position: relative;
  display: flex;
  /*width: 400px;*/
  flex-direction: column;
  width: auto;
}

.select-box .options-container {
  background: #2f3640;
  color: #f5f6fa;
  max-height: 0;
  width: 100%;
  opacity: 0;
  transition: all 0.4s;
  border-radius: 8px;
  overflow: hidden;

  order: 1;
}

.options-container
{
  margin-top: 5px;
}
.selected {
  background: #2f3640;
  border-radius: 8px;
  /*margin-bottom: 8px;*/
  color: #f5f6fa;
  position: relative;
  order: 0;
  text-align: left;
}

.selected::after {
  content: "";
  background: url("img/arrow-down.svg");
  background-size: contain;
  background-repeat: no-repeat;

  position: absolute;
  height: 100%;
  width: 32px;
  right: 10px;
  top: 5px;

  transition: all 0.4s;
}

.select-box .options-container.active {
  max-height: 140px;
  opacity: 1;
  overflow-y: scroll;
  margin-top: 54px;
}

.select-box .options-container.active + .selected::after {
  transform: rotateX(180deg);
  top: -6px;
}

.select-box .options-container::-webkit-scrollbar {
  width: 8px;
  background: #0d141f;
  border-radius: 0 8px 8px 0;
}

.select-box .options-container::-webkit-scrollbar-thumb {
  background: #525861;
  border-radius: 0 8px 8px 0;
}

.select-box .option
{
  padding: 12px 24px;
  cursor: pointer;
}

.selected {
  padding: 12px 12px 12px 0;
  cursor: pointer;
}
    

.select-box .option:hover {
  background: #414b57;
}

.select-box label {
  cursor: pointer;
}

.select-box .option .radio {
  display: none;
}

/* Searchbox */

.search-box input {
  width: 100%;
  padding: 12px 16px;
  font-family: "Roboto", sans-serif;
  font-size: 16px;
  position: absolute;
  border-radius: 8px 8px 0 0;
  z-index: 100;
  border: 8px solid #2f3640;

  opacity: 0;
  pointer-events: none;
  transition: all 0.4s;
}

.search-box input:focus {
  outline: none;
}

.select-box .options-container.active ~ .search-box input {
  opacity: 1;
  pointer-events: auto;
}

</style>
</HeadContent>
