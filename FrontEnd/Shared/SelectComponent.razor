@using MudBlazor.Extensions
@using FrontEnd.Pages
@using FrontEnd.Helpers
@using System.Runtime.CompilerServices
@inject IJSRuntime Js

@* <div class="container"> *@
      <div class="select-box">
        <div class="options-container @(ClassName)">
          
          @foreach (var (name, code) in Enum.Values)
          {
            <div class="option" @onclick="() => ClickOption(name)">
              <input type="radio" class="radio" id="@name" name="category"/>
              <label for="@name" class="SelectValue">@name</label>
            </div>
          }
        </div> 

        <p class="selected" @onclick="Click">
          @Title
        </p>

        <div class="search-box" >
          <input type="text" placeholder="Գտնել..." 
                 @ref="search"
                 @bind="@SearchBoxValue"
                 @onkeyup="SearchOption"
                 id ="search"/>
        </div>
      </div>
    @* </div> *@
    

@code
{
  [Parameter] public ISelect? Enum { get; set; }

  public string? Title { get; set; }
  
   [Parameter] public int SelectedEnum
   {
     get
     {
       if (Enum != null)
         return Enum.SelectedValue.Value;
       return 0;
     }

     set
     {
       if (Enum != null)
         Enum.SelectedValue = value;
     } 
   }

  
  private ElementReference search;
  private string? SearchBoxValue { get; set; }
 
  
  private bool toggle = true;
  static string? CurrentSelectedDepartment { get; set; }
  private async Task ClickOption(string e)
  {
    CurrentSelectedDepartment = e;
    Title = CurrentSelectedDepartment;
    await Click();
    
  }

  
  private void SearchOption()
  {
    Js.InvokeVoidAsync("SearchOption", SearchBoxValue).GetAwaiter();
  }
  
  private async Task Click()
  {
    switch (toggle)
    {
      case true:
        ClassName = "active";
        toggle = false;
        await Js.InvokeVoidAsync("SetFocusToElement", search);
        break;
      case false:
        ClassName = "";
        toggle = true;
        break;
    }
    
    if (this.Enum != null && 
        this.Title != null && 
        this.Enum.Values != null &&
        this.Enum.Values.TryGetValue(this.Title, out var code))
    {
      SelectedEnum = code;
    }
    SearchBoxValue = string.Empty;
    SearchOption();
  }
  
  private string ClassName { get; set; } = string.Empty;

  protected override Task OnInitializedAsync()
  {
    this.Title = this.Enum?.Title;
    return base.OnInitializedAsync();
  }

}




<HeadContent>
    <style>
        * {
            margin: 0;
            box-sizing: border-box;
        }

        body {
            font-family: "Roboto", sans-serif;
            background: #E0E0E0;
        }

        h2 {
            margin: 16px;
        }

        .container {
            margin-top: 10px;
            padding: 0 0;
        }

        .select-box {
            position: relative;
            display: flex; 
            /*width: 400px;*/
            flex-direction: column;
            width: auto;
            border-bottom: 1px solid #bdbdbd;
        }

        .select-box .options-container {
            background: #bdbdbd;
            color: black;
            max-height: 0px;
            width: 100%;
            opacity: 0;
            transition: all 0.4s;
            border-radius: 8px;
            overflow: hidden;
            order: 1;
        }

/*         .options-container {
            margin-top: 5px;
        } */

        .selected {
             background: transparent;
             border-radius: 8px;
             /* margin-bottom: 8px; */
             color: black;
             position: relative;
             order: 0;
             text-align: left;
             padding: 20px 3px 5px 0;
             margin: 0 0 0 0
        }

        .selected::after {
            content: "";
            background: url("img/arrow-down.svg");
            background-size: contain;
            background-repeat: no-repeat;
            position: absolute;
            height: 100%;
            width: 32px;
            right: 0px;
            top: 12px;
            transition: all 0.4s;
        }

        .select-box .options-container.active {
            max-height: 140px;
            opacity: 1;
            overflow-y: scroll;
            margin-top: 54px;
        }
        .selected {
            color: dimgray;
            font-weight: 500;
        }

        .select-box .options-container.active + .selected::after {
            transform: rotateX(180deg);
            top: -6px;
        }

/*         .select-box .options-container::-webkit-scrollbar {
            width: 8px;
            background: black;
            border-radius: 0 8px 8px 0;
        }

        .select-box .options-container::-webkit-scrollbar-thumb {
            background: black;
            border-radius: 0 8px 8px 0;
        } */

        .select-box .option {
            padding: 12px 24px;
            cursor: pointer;
        }

/*         .selected {
            padding: 12px 12px 12px 0;
            cursor: pointer;
        } */


        .select-box .option:hover {
            background: grey;
        }

        .select-box label {
            cursor: pointer;
        }

        .select-box .option .radio {
            display: none;
        }

        /* Searchbox */

        .search-box input {
            width: 100%;
            padding: 8px 10px;
            font-family: "Roboto", sans-serif;
            font-size: 16px;
            color: black;
            position: absolute;
            border-radius: 8px 8px 8px 0px;
            /* z-index: 100; */
            border: 4px solid grey;
            opacity: 0;
            pointer-events: none;
            transition: all 0.4s;
        }

            .search-box input:focus {
                outline: none;
            }

        .select-box .options-container.active ~ .search-box input {
            opacity: 1;
            pointer-events: auto;
        }

    </style>
</HeadContent>
